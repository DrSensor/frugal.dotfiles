[use-grammars]
only = ["pomsky", "wat", "wast", "markdown"]

[language-server.rust-analyzer]
command = "rust-analyzer"
config.inlayHints.bindingModeHints.enable = false
config.inlayHints.closingBraceHints.minLines = 10
config.inlayHints.closureReturnTypeHints.enable = "with_block"
config.inlayHints.discriminantHints.enable = "fieldless"
config.inlayHints.lifetimeElisionHints.enable = "skip_trivial"
config.inlayHints.typeHints.hideClosureInitialization = false

[language-server.gopls]
command = "gopls"
config.hints.assignVariableTypes = true
config.hints.compositeLiteralFields = true
config.hints.constantValues = true
config.hints.functionTypeParameters = true
config.hints.parameterNames = true
config.hints.rangeVariableTypes = true

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"
config.command = [
  "golangci-lint",
  "run",
  "--out-format",
  "json",
  "--issues-exit-code=1",
]

[language-server.elixir-ls]
command = "elixir-ls"
config.elixirLS.dialyzerEnabled = false

[language-server.luals]
command = "lua-language-server"
config.Lua.hint.enable = true
config.Lua.hint.arrayIndex = "Enable"
config.Lua.hint.setType = true
config.Lua.hint.paramName = "All"
config.Lua.hint.paramType = true
config.Lua.hint.await = true

[language-server.vscode-json]
command = "vscode-json-language-server"
args = ["stdio"]
config.provideFormatter = true
config.json.validate.enable = true

[language-server.redhat-yaml]
command = "yaml-language-server"
args = ["--stdio"]
config.format.enable = true
config.format.singleQuote = false
config.format.bracketSpacing = true
config.format.proseWrap = true
config.format.printWidth = 80
config.validate = true
config.hover = true
config.completion = true

[language-server.vscode-html]
command = "vscode-html-language-server"
args = ["--stdio"]
config.provideFormatter = true
config.css = true
config.javascript = true
config.autoClosingTags = true
config.autoCreateQuotes = false
config.suggest.hideAutoCompleteProposals = true
config.format.endWithNewline = true
config.format.templating = true
config.format.indentHandlebars = true
config.format.indentScripts = "separate"

[language-server.vscode-css]
command = "vscode-css-language-server"
args = ["--stdio"]
config.provideFormatter = true
config.css.validate.enable = true

[language-server.tailwindcss]
command = "tailwindcss-language-server"
args = ["--stdio"]
config.includeLanguages = { templ = "html" }

[language-server.sql-lsp]
command = "sql-language-server"
args = ["up", "--method", "stdio"]

[language-server.deno]
command = "deno"
args = ["lsp"]
config.enable = true
config.lint = true
config.unstable = true
config.codeLens.implementations = true
config.codeLens.references = true
config.codeLens.referencesAllFunctions = true
config.codeLens.test = true
config.inlayHints.enumMemberValues.enabled = true
config.inlayHints.functionLikeReturnTypes.enabled = true
config.inlayHints.parameterNames.enabled = "literals"
config.inlayHints.parameterNames.suppressWhenArgumentMatchesName = true
config.inlayHints.parameterType.enabled = true
config.inlayHints.propertyDeclarationTypes.enabled = true
config.inlayHints.variableTypes.enabled = true
config.inlayHints.variableTypes.suppressWhenTypeMatchesName = true
config.maxTsServerMemory = 2048                                         # 2GB

[language-server]
taplo = { command = "taplo", args = ["lsp", "stdio"] }
biome = { command = "biome", args = ["lsp-proxy"] }
pylsp = { commad = "pylsp" }
clangd = { command = "clangd" }
ols = { command = "ols" }
omnisharp = { command = "OmniSharp", args = ["--languageserver"] }
vscode-typescript = { command = "typescript-language-server", args = [
  "--stdio",
] }
templ = { command = "templ", args = ["lsp"] }
nil = { command = "nil", config = { nil = { formatting = { command = [
  "alejandra",
] } } } }
bash-lsp = { command = "bash-language-server", args = ["start"] }
zls = { command = "zls" }
wgsl-analyzer = { command = "wgsl-analyzer" }
marksman = { command = "marksman", args = ["server"] }
dart = { command = "dart", args = ["language-server", "--client-id=helix"] }
kotlin-language-server = { command = "kotlin-language-server" }
rescript-language-server = { command = "rescript-language-server", args = [
  "--stdio",
] }
sourcekit-lsp = { command = "sourcekit-lsp" }

# NOTE: if deno/vscode lsp not work, it may need `language-id = "..."`

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock", "rust-project.json"]
auto-format = true
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
language-servers = ["rust-analyzer"]

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["taplo"]

[[language]]
name = "protobuf"
scope = "source.proto"
injection-regex = "protobuf"
file-types = ["proto"]
roots = []
comment-token = "//"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "sql"
scope = "source.sql"
file-types = ["sql", "dsql"]
roots = []
comment-token = "--"
indent = { tab-width = 4, unit = "    " }
injection-regex = "sql"
language-servers = ["sql-lsp"]

[[language]]
name = "elixir"
scope = "source.elixir"
injection-regex = "elixir"
file-types = ["ex", "exs"]
shebangs = ["elixir"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["elixir-ls"]

[[language]]
name = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types = ["fish"]
shebangs = ["fish"]
roots = []
comment-token = "#"
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "c"
scope = "source.c"
injection-regex = "c"
file-types = ["c"]                      # TODO: ["h"]
roots = []
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
language-servers = ["clangd"]

[[language]]
name = "cpp"
scope = "source.cpp"
injection-regex = "cpp"
file-types = [
  "cc",
  "hh",
  "cpp",
  "hpp",
  "h",
  "ipp",
  "tpp",
  "cxx",
  "hxx",
  "ixx",
  "txx",
  "ino",
]
roots = []
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
language-servers = ["clangd"]

[[language]]
name = "c-sharp"
scope = "source.csharp"
injection-regex = "c-?sharp"
file-types = ["cs"]
roots = []
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
language-servers = ["omnisharp"]

[[language]]
name = "odin"
auto-format = false
scope = "source.odin"
file-types = ["odin"]
roots = ["ols.json"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
language-servers = ["ols"]

[[language]]
name = "go"
scope = "source.go"
injection-regex = "go"
file-types = ["go"]
roots = ["go.work", "go.mod"]
auto-format = true
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
language-servers = [
  "gopls",
  "golangci-lint-lsp",
] # TODO: gopls needs utf-8 offsets?

[[language]]
name = "templ"
scope = "source.templ"
file-types = ["templ"]
roots = ["go.work", "go.mod"]
comment-token = "//"
indent = { tab-width = 2, unit = "  " }
language-servers = ["templ", "tailwindcss"]

[[language]]
name = "json"
scope = "source.json"
injection-regex = "jsonc?"
file-types = ["json"]
roots = []
comment-token = '"//": '
auto-format = true
indent = { tab-width = 2, unit = "  " }
language-servers = ["biome", "deno"]
# formatter = { command = "biome", args = ["format", "--write", "--stdin-file-path=file.json"] }

[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "js|mjs|javascript"
file-types = ["js", "mjs"]
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc", "jsconfig.json", "package.json"]
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
diagnostic-severity = "Hint"
language-servers = ["deno", "biome"]
# formatter = { command = "biome", args = ["format", "--write", "--stdin-file-path=file.js"] }

[[language]]
name = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
file-types = ["jsx"]
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc", "jsconfig.json", "package.json"]
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
diagnostic-severity = "Hint"
language-servers = ["deno", "biome", "tailwindcss"]
# formatter = { command = "biome", args = ["format", "--write", "--stdin-file-path=file.jsx"] }

[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "ts|mts|typescript"
file-types = ["ts", "mts"]
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc", "tsconfig.json", "package.json"]
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
diagnostic-severity = "Hint"
language-servers = ["deno", "biome"]
# formatter = { command = "biome", args = ["format", "--write", "--stdin-file-path=file.ts"] }

[[language]]
name = "tsx"
scope = "source.tsx"
injection-regex = "tsx"
file-types = ["tsx"]
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc", "tsconfig.json", "package.json"]
comment-token = "//"
auto-format = true
indent = { tab-width = 2, unit = "  " }
diagnostic-severity = "Hint"
language-servers = ["deno", "biome", "tailwindcss"]
# formatter = { command = "biome", args = ["format", "--write", "--stdin-file-path=file.tsx"] }

[[language]]
name = "css"
scope = "source.css"
injection-regex = "css"
file-types = ["css"]
roots = ["index.html"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["vscode-css"]
formatter = { command = 'prettier', args = [
  "--parser",
  "css",
  "--plugin-search-dir=/home/wildan/.asdf/installs/nodejs/18.8.0/.npm/lib/node_modules",
] }
# formatter = { command = "sass", args = ["--stdin"] } # too powerful that make PostCSS mostly useless ðŸ˜‚

# [[language]]
# name = "alpinejs"
# scope = "text.html.alpinejs"
# injection-regex = "html|alpinejs"
# file-types = [
#   "html",
#   "htm",
#   "njk",
#   "django",
#   "jinja",
#   "erb",
#   "mustache",
#   "hbs",
#   "php",
# ]
# roots = []
# auto-format = false
# indent = { tab-width = 2, unit = "  " }
# language-servers = ["vscode-html", "tailwindcss"]
# # formatter = { command = "djlint", args = ["-", "--reformat"] } #, "--format-js", "--format-css"] }

[[language]]
name = "html"
scope = "text.html.basic"
injection-regex = "html"
file-types = [
  "html",
  "htm",
  "njk",
  "django",
  "jinja",
  "erb",
  "mustache",
  "hbs",
  "php",
]
roots = []
auto-format = false
indent = { tab-width = 2, unit = "  " }
language-servers = ["vscode-html", "tailwindcss"]
# formatter = { command = "djlint", args = ["-", "--reformat"] } #, "--format-js", "--format-css"] }

[[language]]
name = "ejs"
scope = "text.html.ejs"
injection-regex = "ejs"
file-types = ["ejs"]
roots = ["index.ejs"]
auto-format = false
indent = { tab-width = 2, unit = " " }
language-servers = ["vscode-html", "tailwindcss"]
formatter = { command = "djlint", args = [
  "-",
  "--reformat",
] } #, "--format-js", "--format-css"] }


[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py"]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
comment-token = "#"
indent = { tab-width = 4, unit = "    " }
language-servers = ["pylsp"]                                                # TODO: pyls needs utf-8 offsets

[[language]]
name = "nix"
scope = "source.nix"
injection-regex = "nix"
file-types = ["nix"]
shebangs = []
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["nil"]

[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "bash"
file-types = [
  "sh",
  "bash",
  "zsh",
  ".bash_login",
  ".bash_logout",
  ".bash_profile",
  ".bashrc",
  ".profile",
  ".zshenv",
  ".zlogin",
  ".zlogout",
  ".zprofile",
  ".zshrc",
]
shebangs = ["sh", "bash", "dash"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["bash-lsp"]

[[language]]
name = "lua"
scope = "source.lua"
file-types = ["lua", "knit", "Knitfile", "knitfile"]
shebangs = ["lua"]
roots = [".luarc.json", ".luacheckrc", ".stylua.toml", "selene.toml"]
comment-token = "--"
indent = { tab-width = 2, unit = "  " }
language-servers = ["luals"]

[[language]]
name = "yaml"
scope = "source.yaml"
file-types = ["yml", "yaml"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
injection-regex = "yml|yaml"
language-servers = ["redhat-yaml"]

[[language]]
name = "zig"
scope = "source.zig"
injection-regex = "zig"
file-types = ["zig"]
roots = ["build.zig"]
auto-format = true
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
language-servers = ["zls"]

[[language]]
name = "make"
scope = "source.make"
file-types = ["Makefile", "makefile", "mk", "justfile", ".justfile"]
roots = []
comment-token = "#"
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "glsl"
scope = "source.glsl"
file-types = ["glsl", "vert", "tesc", "tese", "geom", "frag", "comp"]
roots = []
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
injection-regex = "glsl"

[[language]]
name = "comment"
scope = "scope.comment"
roots = []
file-types = []
injection-regex = "comment"

[[language]]
name = "wgsl"
scope = "source.wgsl"
file-types = ["wgsl"]
roots = []
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
language-servers = ["wgsl-analyzer"]

[[language]]
name = "wat"
scope = "source.wat"
file-types = ["wat"]
injection-regex = "wat"
roots = []
comment-token = ";;"
indent = { tab-width = 4, unit = "\t" }

[[grammar]]
name = "wat"
source = { git = "https://github.com/wasm-lsp/tree-sitter-wasm", subpath = "wat", rev = "2ca28a9f9d709847bf7a3de0942a84e912f59088" }

[[language]]
name = "wast"
scope = "source.wast"
file-types = ["wast"]
injection-regex = "wast"
roots = []
comment-token = ";;"
indent = { tab-width = 4, unit = "\t" }

[[grammar]]
name = "wast"
source = { git = "https://github.com/wasm-lsp/tree-sitter-wasm", subpath = "wast", rev = "2ca28a9f9d709847bf7a3de0942a84e912f59088" }

[[language]]
name = "nasm"
scope = "source.nasm"
file-types = ["asm", "s", "S", "nasm"]
injection-regex = "n?asm"
roots = []
comment-token = "#"
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "llvm"
scope = "source.llvm"
roots = []
file-types = ["ll"]
comment-token = ";"
indent = { tab-width = 2, unit = "  " }
injection-regex = "llvm"

[[language]]
name = "tablegen"
scope = "source.tablegen"
roots = []
file-types = ["td"]
comment-token = "//"
indent = { tab-width = 2, unit = "  " }
injection-regex = "tablegen"

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["md"]
roots = [".marksman.toml"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
language-servers = ["marksman"]

[[grammar]]
name = "markdown"
source = { git = "https://github.com/MDeiml/tree-sitter-markdown", rev = "f9820b2db958228f9be339b67d2de874d065866e", subpath = "tree-sitter-markdown" }

[[language]]
name = "markdown.inline"
scope = "source.markdown.inline"
injection-regex = "markdown\\.inline"
file-types = []
roots = []
grammar = "markdown_inline"

[[grammar]]
name = "markdown_inline"
source = { git = "https://github.com/MDeiml/tree-sitter-markdown", rev = "f9820b2db958228f9be339b67d2de874d065866e", subpath = "tree-sitter-markdown-inline" }

[[language]]
name = "dart"
scope = "source.dart"
file-types = ["dart"]
roots = ["pubspec.yaml"]
auto-format = true
comment-token = "//"
indent = { tab-width = 2, unit = "  " }
language-servers = ["dart"]

[[language]]
name = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
roots = ["Dockerfile"]
file-types = ["Dockerfile", "dockerfile"]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "git-commit"
scope = "git.commitmsg"
roots = []
file-types = ["COMMIT_EDITMSG"]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "git-diff"
scope = "source.diff"
roots = []
file-types = ["diff"]
injection-regex = "diff"
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "git-rebase"
scope = "source.gitrebase"
roots = []
file-types = ["git-rebase-todo"]
injection-regex = "git-rebase"
comment-token = "#"
indent = { tab-width = 2, unit = " " }

[[language]]
name = "regex"
scope = "source.regex"
injection-regex = "regex"
file-types = ["regex"]
roots = []

[[language]]
name = "pomsky"
scope = "source.pomsky"
injection-regex = "pomsky"
file-types = ["pomsky", "pom"]
indent = { tab-width = 2, unit = "  " }
roots = []
comment-token = "#"

[[grammar]]
name = "pomsky"
source = { git = "https://github.com/pomsky-lang/tree-sitter-pomsky", rev = "f400fe869b6aca520f16ccc455d9920ac95f6964" }

[[language]]
name = "git-config"
scope = "source.gitconfig"
roots = []
# TODO: allow specifying file-types as a regex so we can read directory names (e.g. `.git/config`)
file-types = [".gitmodules", ".gitconfig"]
injection-regex = "git-config"
comment-token = "#"
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "graphql"
scope = "source.graphql"
injection-regex = "graphql"
file-types = ["gql", "graphql"]
roots = []
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "iex"
scope = "source.iex"
injection-regex = "iex"
file-types = ["iex"]
roots = []

[[language]]
name = "rescript"
scope = "source.rescript"
injection-regex = "rescript"
file-types = ["res"]
roots = ["bsconfig.json"]
auto-format = true
comment-token = "//"
indent = { tab-width = 2, unit = "  " }
language-servers = ["rescript-language-server"]

[[language]]
name = "kotlin"
scope = "source.kotlin"
file-types = ["kt", "kts"]
roots = ["settings.gradle", "settings.gradle.kts"]
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
language-servers = ["kotlin-language-server"]

[[language]]
name = "swift"
scope = "source.swift"
injection-regex = "swift"
file-types = ["swift"]
roots = ["Package.swift"]
comment-token = "//"
auto-format = true
language-servers = ["sourcekit-lsp"]
