# BUG(kakoune):
# 1. on mouse scrolling up or page up not work in consequtive

set-option global ui_options terminal_assistant=none
set-option global tabstop 4

set-face global MenuForeground bright-black,yellow+b
set-face global MenuBackground default,bright-black
set-face global MenuInfo default,default+u
set-face global Information default,black

set-face global PrimarySelection default,default+br
set-face global PrimaryCursor default,default+br
set-face global PrimaryCursorEol default,yellow
set-face global SecondarySelection default,default+r
set-face global SecondaryCursor default,default+r
set-face global SecondaryCursorEol default,bright-black
set-face global MatchingChar default,default+ur

# Left side
set-face global LineNumbers rgb:9e9e9e
set-face global LineNumbersWrapped bright-black,default+r
set-face global WrapMarker yellow
set-face global BufferPadding black # hide `~` char

# set-face global StatusLineInfo bright-black,default
# set-face global StatusLineValue bright-black,default+b
set-face global StatusLine yellow,default
set-face global StatusCursor default,default+r
set-face global StatusLineMode default,default+b

# add-highlighter global/ number-lines -relative -hlcursor -separator "| "
add-highlighter global/ show-matching
add-highlighter global/ wrap -word -indent -marker "␣"

map global insert <c-s> '<esc>:write<ret>i'
map global normal <F1> ':comment-line<ret>'
map global insert <F1> '<esc>:comment-line<ret>i'
map global normal <a-F1> ':comment-block<ret>'
map global insert <a-F1> '<esc>:comment-block<ret>i'
map global normal <c-d> ':select-or-add-cursor<ret>'

define-command -hidden select-or-add-cursor %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "robertmeta/plug.kak" noload config %{
	#> configure plug.kak here <#
}
plug "evanrelf/number-toggle.kak" config %{
	set-option global number_toggle_params -hlcursor -separator "┆"
}
plug "lePerdu/kakboard" %{
	hook global WinCreate .* %{ kakboard-enable }
}
plug "andreyorst/fzf.kak" config %{
	map -docstring 'fzf mode' global normal '<c-p>' ': fzf-mode<ret>'
} defer "fzf" %{
	set-option global fzf_preview_width '65%'
	set-option global fzf_project_use_tilda true
	set-option global fzf_terminal_command 'kitty-terminal kak -c %val{session} -e "%arg{@}"'
	evaluate-commands %sh{
		if [ -n "$(command -v fd)" ]; then
			echo "set-option global fzf_file_command %{fd .  --no-ignore --type f --follow --hidden --exclude .git --exclude .svn}"
		else
			echo "set-option global fzf_file_command %{find .  \( -path '*/.svn*' -o -path '*/.git*' \) -prune -o -type f -follow -print}"
		fi
		[ -n "$(command -v bat)" ] && echo "set-option global fzf_highlight_command bat"
		[ -n "${kak_opt_grepcmd}" ] && echo "set-option global fzf_sk_grep_command %{${kak_opt_grepcmd}}"
	}
}
plug "eburghar/kakship" do %{
	cargo install --force --path . --root ~/.local
	[ ! -e $kak_config/starship.toml ] && cp starship.toml $kak_config/
} config %{
	kakship-enable
}

## git-branch.kak by lenormf
## Store the current git branch that contains the buffer
# --------------------------------------------------------
declare-option -docstring "name of the git branch holding the current buffer" str modeline_git_branch
hook global WinCreate .* %{
	hook window NormalIdle .* %{ evaluate-commands %sh{
		branch=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
		if [ -n "${branch}" ]; then
			printf 'set window modeline_git_branch %%{%s}' "${branch}"
		fi
	} }
	evaluate-commands %sh{
		is_work_tree=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --is-inside-work-tree 2>/dev/null)
		if [ "${is_work_tree}" = 'true' ]; then
			printf 'set-option window modelinefmt %%{%s}' " %opt{modeline_git_branch}  ${kak_opt_modelinefmt}"
		fi
	}
}


## kak-lsp
## Enable language server and add additional feature on specific filetype=
# ---------------------------------------------------------------------------
evaluate-commands %sh{ kak-lsp --kakoune -s $kak_session }
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"
hook global WinSetOption filetype=.* %{
	lsp-enable-window
	lsp-auto-hover-enable
	map window normal <F2> ':lsp-rename-prompt<ret>'
	# BUG: doesn't return back into insert mode
	# map window insert <F2> '<esc>:lsp-rename-prompt<ret>i'
	map window normal <F3> ':lsp-formatting<ret>'
	map window insert <F3> '<esc>:lsp-formatting<ret>i'
}
hook global WinSetOption filetype=rust %{
	hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
	hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
	hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
	hook -once -always window WinSetOption filetype=.* %{
		remove-hooks window rust-inlay-hints
	}
}
hook global WinSetOption filetype=zig %{
    set-option buffer formatcmd 'zig fmt'
    set-option window lsp_auto_highlight_references true
    set-option global lsp_server_configuration zls.zig_lib_path="/usr/lib/zig"
    set-option -add global lsp_server_configuration zls.warn_style=true
    set-option -add global lsp_server_configuration zls.enable_semantic_tokens=true
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}
hook global WinSetOption filetype=go %{
	hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
	hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
	hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
	hook -once -always window WinSetOption filetype=.* %{
		remove-hooks window semantic-tokens
	}
}
hook global WinSetOption filetype=(nim|javascript|typescript|python) %{
	set-option buffer indentwidth 2
}
hook global BufCreate .+\.(importmap|webmanifest) %{
    set-option buffer filetype json
}
