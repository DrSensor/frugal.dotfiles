snippet_support = true
verbosity = 2

[semantic_scopes]
# Map textmate scopes to kakoune faces for semantic highlighting
# the underscores are translated to dots, and indicate nesting.
# That is, if variable_other_field is omitted, it will try the face for
# variable_other and then variable
#
# To see a list of available scopes in the debug buffer, run lsp-semantic-available-scopes
variable = "variable"
entity_name_function = "function"
entity_name_type = "type"
variable_other_enummember = "variable"
entity_name_namespace = "module"

# Semantic tokens support
# See https://github.com/microsoft/vscode-languageserver-node/blob/8c8981eb4fb6adec27bf1bb5390a0f8f7df2899e/client/src/semanticTokens.proposed.ts#L288
# for token/modifier types.
# [[semantic_tokens]]
# token = ""
# face  = ""
# modifiers = [""]
# [[semantic_tokens]]
# token = ""
# face  = ""

[semantic_modifiers]
documentation = "documentation"
readonly = "default+d"

[server]
timeout = 10
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
# timeout = 1800 # seconds = 30 minutes

[language.zig]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"
#command = "sh"
#args = ["-c", "if command -v rustup >/dev/null; then $(rustup which rust-analyzer); else rust-analyzer; fi"]
#args = ["-c", "if command -v rustup >/dev/null; then $(rustup which rls); else rls; fi"]

[language.crystal]
filetypes = ["crystal"]
roots = ["shard.yml"]
command = "scry"

[language.node]
filetypes = ["typescript", "javascript"]
roots = ["package.json"]
command = "typescript-language-server"
args = ["--stdio"]

# [language.deno]
# filetypes = ["typescript", "javascript"]
# roots = ["import_map.json"]
# command = "deno"
# args = ["lsp"]

# [language.deno.settings]
# enable = true
# lint = true
# unstable = true

[language.json]
filetypes = ["json", "importmap", "webmanifest"]
roots = [".git"]
command = "json-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css"]
roots = ["package.json"]
command = "css-languageserver"
args = ["--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam", "dune"]
command = "ocaml-language-server"
args = ["--stdio"]

[language.reason]
filetypes = ["reason"]
roots = ["package.json", "Makefile", ".git", ".hg"]
command = "ocaml-language-server"
args = ["--stdio"]

[language.ruby]
filetypes = ["ruby"]
roots = ["Gemfile"]
command = "solargraph"
args = ["stdio"]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".cquery"]
command = "cquery"
args = ["--init={\"cacheDirectory\":\"/tmp/cquery\",\"highlight\":{\"enabled\":true}}"]

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
# You might also be interested in the newer, but early stage, haskell-language-server
# https://github.com/haskell/haskell-language-server
command = "hie-wrapper"
args = ["--lsp"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.dart]
# start shell to find path to dart analysis server source
filetypes = ["dart"]
roots = ["pubspec.yaml", ".git"]
command = "sh"
args = ["-c", "dart $(dirname $(which dart))/snapshots/analysis_server.dart.snapshot --lsp"]

[language.d]
filetypes = ["d", "di"]
roots = [".git", "dub.sdl", "dub.json"]
command = "dls"

[language.php]
filetypes = ["php"]
roots = [".htaccess", "composer.json"]
command = "intelephense"
args = ["--stdio"]

[language.php.settings]
storagePath = "/tmp/intelephense"

[language.nim]
filetypes = ["nim"]
roots = ["*.nimble", ".git"]
command = "nimlsp"

[language.nix]
filetypes = ["nix"]
roots = ["flake.nix", "shell.nix", "default.nix", ".git"]
command = "rnix-lsp"

[language.elm]
filetypes = ["elm"]
roots = ["elm.json"]
command = "elm-language-server"
args = ["--stdio"]

[language.elm.settings]
runtime = "node"
elmPath = "elm"
elmFormatPath = "elm-format"
elmTestPath = "elm-test"

[language.latex]
filetypes = ["latex"]
roots = [".git"]
command = "texlab"

[language.gdscript]
filetypes = ["gd", "gdscript", "gdscript3"]
roots = ["project.godot", ".git"]
command = "nc"
args = ["localhost", "6008"]
